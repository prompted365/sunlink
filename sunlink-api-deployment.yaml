apiVersion: apps/v1
kind: Deployment
metadata:
  name: sunlink-api-deployment
  labels:
    app: sunlink-api
  annotations:
    prometheus.io/scrape: "true" # Enable Prometheus scraping
    prometheus.io/port: "8080" # Prometheus metrics port
spec:
  selector:
    matchLabels:
      app: sunlink-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: sunlink-api
    spec:
      containers:
        - name: sunlink-api
          image: gcr.io/solarflux-harmony/sunlink-api:latest
          ports:
            - containerPort: 8080
          env:
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: sunlink-api-secrets
                  key: REDIS_URL
            - name: SUPABASE_KEY
              valueFrom:
                secretKeyRef:
                  name: sunlink-api-secrets
                  key: SUPABASE_KEY
            - name: SUPABASE_URL
              valueFrom:
                secretKeyRef:
                  name: sunlink-api-secrets
                  key: SUPABASE_URL
            - name: STORAGE_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: sunlink-api-secrets
                  key: STORAGE_BUCKET_NAME
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: sunlink-api-secrets
                  key: API_KEY
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
